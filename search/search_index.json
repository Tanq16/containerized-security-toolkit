{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":""},{"location":"#containerized-security-toolkit","title":"Containerized Security Toolkit","text":"<p>The Containerized Security Toolkit (CST) provides a comprehensive suite of Docker images tailored for various security operations. Each variant is designed for specific use cases while maintaining consistency in basic functionality.</p> <p>For getting started quickly, visit the Getting Started Guide.</p>"},{"location":"#available-variants","title":"Available Variants","text":"<ul> <li>General: Core security tools and utilities for general security operations</li> <li>Cloud: Specialized for cloud security assessments and operations</li> <li>Dev: Development environment with security tools (Python, Go, Node.js) - <code>Still a WIP</code></li> <li>Netsec: Network security assessment and monitoring tools - <code>Still a WIP</code></li> <li>Rice: Enhanced version of General with CLI Productivity Suite</li> </ul> <p>Each variant is available for both x86_64 and ARM64 architectures:</p> <pre><code>tanq16/cst-&lt;variant&gt;:amd  # For x86_64 systems\ntanq16/cst-&lt;variant&gt;:arm  # For ARM64 systems (incl. Apple Silicon, etc.)\n</code></pre>"},{"location":"#quick-start","title":"Quick Start","text":"<p>Get started with the General variant in seconds:</p> <pre><code># Create persistence directory\nmkdir -p $HOME/docker_work/\n\n# Run container (use cst-general:arm for ARM64 systems)\ndocker run --name=\"cst_general\" \\\n  -v $HOME/docker_work/:/persist \\\n  --rm -it tanq16/cst-general:amd \\\n  /bin/bash\n</code></pre>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Persistent Storage: Mount local directories for data persistence</li> <li>Secure Design: Regular security updates and best practices</li> <li>Purpose-Built: Each variant optimized for specific security tasks</li> <li>Rich Tooling: Comprehensive set of pre-installed security tools</li> <li>Consistent Environment: Reproducible setup across systems</li> <li>Cross-Platform: Full support for both x86_64 and ARM64</li> </ul>"},{"location":"#quick-reference","title":"Quick Reference","text":"<ul> <li>Documentation</li> <li>Docker Hub - CST General</li> <li>Docker Hub - CST Cloud</li> <li>Docker Hub - CST Rice</li> <li>Docker Hub - Legacy CST</li> <li>Source Code</li> </ul>"},{"location":"contributing/","title":"Contributing to CST","text":"<p>Thank you for your interest in contributing to the Containerized Security Toolkit! This document provides guidelines for contributing to the project.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository</li> <li>Clone your fork:    <pre><code>git clone https://github.com/YOUR-USERNAME/containerized-security-toolkit\n</code></pre></li> <li>Create a new branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></li> </ol>"},{"location":"contributing/#development-environment","title":"Development Environment","text":"<ol> <li>Install prerequisites: Docker &amp; Docker Buildx (if working cross-platform)</li> <li>Install documentation dependencies:    <pre><code>pip install mkdocs-material\n</code></pre></li> </ol>"},{"location":"contributing/#building-images","title":"Building Images","text":"<p>To build images locally:</p> <pre><code># For x86_64 or ARM64 systems\ncd images/$VARIANT\ndocker build -f builder.Dockerfile -t intermediate_builder .\ndocker build -t cst-&lt;variant&gt;:local .\n</code></pre> <p>To build ARM64 on x86_64 systems, use:</p> <pre><code># For ARM64 on x86_64 systems\ndocker buildx build --platform linux/arm64 -f builder.Dockerfile -t intermediate_builder .\ndocker buildx build --platform linux/arm64 -t cst-&lt;variant&gt;:local .\n</code></pre>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<pre><code>.\n\u251c\u2500\u2500 docs/              # Documentation\n\u251c\u2500\u2500 images/            # Dockerfile for each variant\n\u2502   \u251c\u2500\u2500 general/\n\u2502   \u251c\u2500\u2500 cloud/\n\u2502   \u251c\u2500\u2500 dev/\n\u2502   \u251c\u2500\u2500 netsec/\n\u2502   \u2514\u2500\u2500 rice/\n\u2514\u2500\u2500 scripts/           # Build and utility scripts\n</code></pre>"},{"location":"contributing/#coding-guidelines","title":"Coding Guidelines","text":"<ul> <li> <p>Dockerfiles</p> <ul> <li>Use multi-stage builds</li> <li><code>builder.Dockerfile</code> should contain <code>go</code> installs and release downloads</li> <li>Document non-obvious commands</li> <li>Follow best practices for size optimization</li> </ul> </li> <li> <p>Documentation</p> <ul> <li>Use clear, concise language</li> <li>Prefer short and bulleted information</li> <li>Keep formatting consistent</li> <li>Update relevant sections only</li> </ul> </li> <li> <p>Scripts</p> <ul> <li>Add usage comments where applicable</li> <li>Name them <code>&lt;variant&gt;-&lt;action&gt;.sh</code></li> </ul> </li> </ul>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Update documentation for new features</li> <li>Create succint PR description</li> <li>Link relevant issues (if any)</li> </ol> <p>Before submitting the PR:</p> <ol> <li>Build images locally</li> <li>Test basic functionality</li> <li>Verify installed tools work</li> <li>Add examples to documentation if appropriate</li> <li>Explicitly state any breaking changes in PR</li> </ol>"},{"location":"contributing/#questions","title":"Questions?","text":"<ul> <li>Open an issue</li> <li>Check documentation</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>Your contributions will be licensed under the MIT License.</p>"},{"location":"conventions/","title":"CST Conventions","text":"<p>This document outlines the standard conventions used across all CST variants.</p>"},{"location":"conventions/#directory-structure","title":"Directory Structure","text":"<pre><code>/\n\u251c\u2500\u2500 opt/\n\u2502   \u251c\u2500\u2500 executables/    # Binary tools and utilities\n\u2502   \u2514\u2500\u2500 pyenv/          # Python virtual environment\n\u251c\u2500\u2500 persist/            # Mount point for persistent storage\n\u2514\u2500\u2500 root/               # User home directory\n</code></pre>"},{"location":"conventions/#port-mapping-conventions","title":"Port Mapping Conventions","text":"<p>When exposing ports from the container, follow these conventions:</p> <ul> <li>SSH: <code>50022</code> (host) \u2192 <code>22</code> (container)</li> <li>HTTP: <code>50080</code> (host) \u2192 <code>80</code> (container)</li> <li>HTTPS: <code>50443</code> (host) \u2192 <code>443</code> (container)</li> <li>Dynamic Ports: Start at <code>50000</code> + original port</li> <li>Dynamic Port Forward: always use <code>65500</code></li> </ul> <p>These conventions are generally only needed if you're adding new port publish arguments using the <code>-p</code> flag to the start command. Otherwise, it's easiest to use SSH dynamic port forwarding. Refer to the example workflow for more details.</p>"},{"location":"conventions/#environment-variables","title":"Environment Variables","text":"<p>Standard environment details used across variants:</p> <ul> <li><code>TERM=xterm-256color</code> (set this manually if not the case on launch)</li> <li>Python environment at <code>/opt/pyenv/</code></li> <li><code>PATH</code> includes <code>/opt/executables</code></li> </ul>"},{"location":"conventions/#tool-installation-locations","title":"Tool Installation Locations","text":"<ul> <li>Binary tools: <code>/opt/executables/</code></li> <li>Python packages: <code>/opt/pyenv/</code></li> <li>Binaries: <code>/usr/bin/</code> &amp; <code>/usr/local/bin/</code></li> </ul>"},{"location":"conventions/#persistent-storage","title":"Persistent Storage","text":"<ul> <li>Mount point: <code>/persist/</code></li> <li>Recommended host location: <code>$HOME/docker_work/</code></li> <li>Used for:<ul> <li>Project files</li> <li>Configuration files</li> <li>Shell history</li> <li>Tool configurations</li> </ul> </li> </ul>"},{"location":"conventions/#ssh-configuration","title":"SSH Configuration","text":"<ul> <li>Root login enabled for convenience</li> <li>Password authentication enabled</li> <li>Dynamic port forwarding supported</li> <li>Custom port (<code>50022</code>) to avoid conflicts</li> </ul>"},{"location":"conventions/#best-practices","title":"Best Practices","text":"<ul> <li> <p>Data Persistence</p> <ul> <li>Store important data in <code>/persist/</code></li> <li>Use version control for project files</li> <li>Back up configurations regularly</li> </ul> </li> <li> <p>Resource Management</p> <ul> <li>Clean up unused containers</li> <li>Prune Docker images periodically</li> <li>Monitor disk space usage</li> </ul> </li> <li> <p>Security</p> <ul> <li>Change SSH password for every run</li> <li>Use SSH keys when possible</li> <li>Keep host directory permissions restrictive</li> </ul> </li> <li> <p>Workflow</p> <ul> <li>Use shell functions for container management</li> <li>Maintain separate instances for different projects</li> <li>Document custom configurations</li> </ul> </li> </ul>"},{"location":"conventions/#version-control","title":"Version Control","text":"<ul> <li>Image versions only represent build time</li> <li>Tools are always installed to their latest versions, unless necessary for error fixes</li> <li>Base image: Ubuntu Jammy (22.04 LTS)</li> <li>Updates follow semantic versioning</li> </ul>"},{"location":"getting-started/","title":"Getting Started with CST","text":"<p>This guide will help you get up and running with the Containerized Security Toolkit.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Docker installed and running on your system</li> <li>Basic familiarity with Docker commands</li> <li>At least 10GB of free disk space (varies by variant)</li> </ul>"},{"location":"getting-started/#basic-setup","title":"Basic Setup","text":"<ol> <li> <p>Create a persistence directory:     <pre><code>mkdir -p $HOME/docker_work/\n</code></pre></p> </li> <li> <p>Choose your variant and architecture:     <pre><code># For x86_64 systems\ndocker pull tanq16/cst-general:amd\n\n# For ARM64 systems (Apple Silicon, etc.)\ndocker pull tanq16/cst-general:arm\n</code></pre></p> </li> <li> <p>Run the container:     <pre><code>docker run --name=\"cst-general\" \\\n-v $HOME/docker_work/:/persist \\\n--rm -it tanq16/cst-general:amd \\\n/bin/bash\n</code></pre></p> </li> </ol>"},{"location":"getting-started/#advanced-setup","title":"Advanced Setup","text":""},{"location":"getting-started/#shell-functions-for-convenience","title":"Shell Functions for Convenience","text":"<p>Create the persistence directory as shown above. Then, add these functions and alias to your shell's RC file (<code>.bashrc</code>, <code>.zshrc</code>, etc.) to start and stop the containers more efficiently:</p> <pre><code># Start Container\nstart_cst() {\n    # Tkes in an argument is the variant name, defaulting to 'general'\n    variant=${1:-general}\n    arch=$(uname -m | grep -q \"aarch64\" &amp;&amp; echo \"arm\" || echo \"amd\")\n\n    # Run container with SSH enabled and history persistence\n    docker run --name=\"cst_${variant}\" --rm -d \\\n    -v $HOME/docker_work/:/persist \\\n    -p 50022:22 \\\n    -it tanq16/cst-${variant}:${arch} \\\n    bash -c \"service ssh start; cp /persist/.bash_history /root/.bash_history 2&gt;/dev/null; tail -f /dev/null\"\n\n    # Generate and set SSH password\n    new_pass=$(cat /dev/random | head -c 20 | base64 | tr -d '=+/')\n    echo \"Password: $new_pass\"\n    echo $new_pass &gt; $HOME/.cst-pw\n    docker exec -e newpp=\"$new_pass\" cst_${variant} bash -c 'echo \"root:$(printenv newpp)\" | chpasswd'\n}\n\n# Stop Container\nstop_cst(){\n    variant=${1:-general}\n    docker cp cst-${variant}:/root/.bash_history $HOME/docker_work/.bash_history 2&gt;/dev/null\n    docker stop cst-${variant} -t 0\n}\n\n# SSH alias without known host file write\nalias sshide='ssh -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\"'\n</code></pre> <p>Restart or respawn your shell after saving to ensure the new commands are available.</p> <p>Disk Space Consideration</p> <p>Remember the <code>--rm</code> flag is necessary to delete the container after stopping it. This is very important because usual work can cause the container's ephemeral filesystem to become as large as 1GB or more. If the containers aren't automatically removed, it can eat up disk space rapidly.</p> <p>For the rice variant</p> <p>The <code>rice</code> variant uses <code>zsh</code> by default, so the functions should be edited to maintain the <code>.zsh_history</code> file instead of <code>.bash_history</code>.</p>"},{"location":"getting-started/#using-ssh-for-access","title":"Using SSH for Access","text":"<p>With the above functions in place, the images can be launched with an SSH server already started. This allows SSH-ing into the running container as many number of times as needed. It emulates a virtual machine in this case.</p> <ol> <li> <p>Start container:     <pre><code>start_cst cloud\n</code></pre></p> </li> <li> <p>SSH into container:     <pre><code>sshide root@localhost -p 50022\n</code></pre>     Use the password that was printed in the <code>start_cst</code> command. It's also stored at <code>$HOME/.cst-pw</code></p> </li> <li> <p>When done, stop container:     <pre><code>stop_cst cloud\n</code></pre></p> </li> </ol> <p>To understand why SSH and shell functions exist as a workflow, refer to Advanced Usage.</p>"},{"location":"getting-started/#persistence","title":"Persistence","text":"<p>The <code>/persist</code> directory in the container maps to <code>$HOME/docker_work/</code> on your host system. Use this directory for:</p> <ul> <li>Project files</li> <li>Configuration files</li> <li>Data that needs to persist between container restarts</li> <li>Shell history files</li> <li>Local setup file (if you have a specific set of instructions you want to run at container start, you can easily store that as <code>run.sh</code> in the persistence directory)</li> </ul>"},{"location":"getting-started/#next-steps","title":"Next Steps","text":"<ul> <li>Check out the Variant-Specific Guides for your chosen variant</li> <li>Review Conventions for best practices</li> <li>Explore Advanced Usage for more features</li> <li>Read Example Workflow to see an example of how I use the <code>cst-rice</code> image for my day to day</li> </ul>"},{"location":"advanced/build/","title":"DIY Build Guide","text":"<p>This guide details how to build custom images for specific purposes. The main idea is to use the <code>cst-general</code> image Dockerfiles as base and add tool and services onto it for custom operations.</p>"},{"location":"advanced/build/#basic-build-process","title":"Basic Build Process","text":"<p>CST uses a multi-stage build process for efficient image creation:</p> <ol> <li> <p>Builder Stage: This stage builds or downloads tools. It is primarily meant for tools that are installed as executables, such as <code>go</code> installs or executable downloads. Often it would require multiple images being used in a multi-stage build to store executables inside an alpine image to copy to the main stage later. Example:    <pre><code>FROM ubuntu:jammy AS executable_builder\n# Tool compilation and binary creation\n\nFROM golang as go_builder\n# Go installs\n\nFROM alpine\nCOPY --from=go_builder /executables/* /executables/\nCOPY --from=executable_builder /executables/* /executables/\n</code></pre></p> </li> <li> <p>Final Stage: This uses the resulting image from the builder stage to copy artifacts into the main Dockerfile to produce the final image. This also includes non-binary installs (such as Tmux or <code>apt</code> installs). Example:    <pre><code>FROM intermediate_builder as intermediate_builder\n\nFROM ubuntu:jammy\n# System setup and tool installation\n\nCOPY --from=intermediate_builder /executables /opt/executables\nRUN chown -R root:root /opt/executables &amp;&amp; chmod 755 /opt/executables/*\n</code></pre></p> </li> </ol> <p>Now, to build a custom image, create a new variant directory as follows:</p> <pre><code>cp -r images/general images/myvariant &amp;&amp; \\\ncd images/myvariant\n</code></pre> <p>Then modify the two Dockerfiles, based on the details mentioned earlier. After that, you can build as follows:</p> <pre><code># Build intermediate layer\ndocker build -f builder.Dockerfile -t intermediate_builder .\n\n# Build final image\ndocker build -t cst-&lt;variant&gt;:local .\n\n# Clean up\ndocker builder prune -f\n</code></pre> <p>Cleanup</p> <p>Don't forget to cleanup otherwise the builder cache will pile up and really eat up disk space slowly.</p>"},{"location":"advanced/build/#advanced-building","title":"Advanced Building","text":""},{"location":"advanced/build/#cross-platform-builds","title":"Cross-Platform Builds","text":"<p>Building for multiple architectures:</p> <pre><code># Setup buildx\ndocker buildx create --use\n\n# Build multi-platform image\ndocker buildx build \\\n    --platform linux/amd64,linux/arm64 \\\n    -t username/cst-custom:latest .\n</code></pre>"},{"location":"advanced/build/#optimization-techniques","title":"Optimization Techniques","text":"<ul> <li>A multi-stage build itself reduces size significantly</li> <li>When cloning repositories with <code>git</code>, use <code>--depth=1</code> to save <code>.git</code> space</li> <li>Use <code>DEBIAN_FRONTEND=\"noninteractive\"</code> as the environment variable for <code>apt</code> to prevent failures</li> <li>Use <code>--no-install-recommends</code> with <code>apt</code> to ensure only required packages are installed</li> </ul> <p>Base Image</p> <p>The base image being used is the <code>ubuntu:jammy</code> image. While a method of reducing size can be to use <code>alpine</code> images for the final image, in reality it does not make much of a difference with tools installed; essentially 250+ MB vs 15+ MB doesn't matter when the final images are sized in giga bytes. This is because there are tools like Azure CLI, which take up 2GB alone. Also, the <code>jammy</code> variant is being used for better overall stability. This may change in the future as needed. Also, using <code>ubuntu</code> helps with debugging and maintaining a common environment that most people use and have the best online support for.</p>"},{"location":"advanced/shortcuts/","title":"Shell Shortcuts and Functions","text":"<p>The CST environment can be enhanced with shell functions that streamline container management and daily operations. These functions provide a seamless workflow for starting, accessing, and managing CST containers.</p>"},{"location":"advanced/shortcuts/#core-container-management","title":"Core Container Management","text":"<p>As mentioned in Getting Started, the following shell functions handle container lifecycle management. Add these to your shell's RC file (<code>.bashrc</code>, <code>.zshrc</code>, etc.):</p> <pre><code>start_cst() {\n    # First argument is the variant name, defaulting to 'general'\n    variant=${1:-general}\n    arch=$(uname -m | grep -q \"aarch64\" &amp;&amp; echo \"arm\" || echo \"amd\")\n\n    # Run container with SSH enabled and history persistence\n    docker run --name=\"cst_${variant}\" --rm -d \\\n    -v $HOME/docker_work/:/persist \\\n    -p 50022:22 \\\n    -it tanq16/cst-${variant}:${arch} \\\n    bash -c \"service ssh start; cp /persist/.bash_history /root/.bash_history 2&gt;/dev/null; tail -f /dev/null\"\n\n    # Generate and set SSH password\n    new_pass=$(cat /dev/random | head -c 20 | base64 | tr -d '=+/')\n    echo \"Password: $new_pass\"\n    echo $new_pass &gt; $HOME/.cst-pw\n    docker exec -e newpp=\"$new_pass\" cst_${variant} bash -c 'echo \"root:$(printenv newpp)\" | chpasswd'\n}\n\nstop_cst() {\n    # Gracefully stop container and preserve history\n    variant=${1:-general}\n    docker cp cst_${variant}:/root/.bash_history $HOME/docker_work/.bash_history 2&gt;/dev/null\n    docker stop cst_${variant} -t 0\n}\n\n# SSH alias without known host file write\nalias sshide='ssh -o \"StrictHostKeyChecking=no\" -o \"UserKnownHostsFile=/dev/null\"'\n</code></pre> <p>These functions provide:</p> <ul> <li>Automatic architecture detection (ARM/AMD)</li> <li>The first argument to the <code>start_cst</code> function will be the variant name</li> <li>Command history is automatically copied on container start and stop to ensure persistence</li> <li>SSH server is enabled with access to a random password stored in <code>$HOME/.cst-pw</code></li> <li>A default volume in <code>$HOME/docker_work</code> is already mounted for persistence</li> </ul>"},{"location":"advanced/shortcuts/#enhanced-access-functions","title":"Enhanced Access Functions","text":"<p>Additional functions can improve container access and management:</p> <pre><code>connect_cst() {\n    # Direct shell access to running container\n    variant=${1:-general}\n    docker exec -it cst_${variant} /bin/bash\n}\n\nssh_cst() {\n    # SSH into container with dynamic port forwarding\n    variant=${1:-general}\n    ssh -o \"StrictHostKeyChecking=no\" \\\n        -o \"UserKnownHostsFile=/dev/null\" \\\n        -D 65500 \\\n        root@localhost -p 50022\n}\n</code></pre>"},{"location":"advanced/shortcuts/#usage-examples","title":"Usage Examples","text":"<p>Starting a Cloud variant container with extra port mapping:</p> <pre><code>start_cst cloud\n</code></pre> <p>Accessing the container via SSH with dynamic port forwarding:</p> <pre><code>ssh_cst cloud\n</code></pre> <p>Adding port mapping to a running container:</p> <pre><code>connect_cst general\n</code></pre>"},{"location":"advanced/shortcuts/#best-practices","title":"Best Practices","text":"<ol> <li>Resource Management: Create cleanup functions for maintenance    <pre><code>cleanup_cst() {\n    docker ps -a | grep 'cst_' | awk '{print $1}' | xargs docker stop\n    docker container prune -f\n}\n</code></pre></li> <li> <p>Network Security: Use SSH dynamic port forwarding for securely accessing container-internal services    <pre><code>sshide -D 65500 root@localhost -p 50022\n</code></pre></p> </li> <li> <p>Data Persistence: Structure your persistent storage    <pre><code>docker_work/\n\u251c\u2500\u2500 projects/\n\u251c\u2500\u2500 .bash_history\n\u251c\u2500\u2500 configs/\n\u2514\u2500\u2500 run.sh\n</code></pre></p> </li> </ol>"},{"location":"advanced/workflow/","title":"Example Workflow","text":"<p>This document details the workflow I use on a daily basis, which can be seen as a general example.</p> <p>First, the initial functions are similar to the ones mentioned in the shortcuts; however, includes more arbitrary arguments:</p> <pre><code>start_cst() {\n    arch=$(uname -m | grep -q \"aarch64\" &amp;&amp; echo \"arm\" || echo \"amd\")\n\n    docker run --name=\"cst\" --rm -d \\\n    -v $HOME/docker_work/:/persist \\\n    -p 50022:22 $@ \\\n    -it tanq16/cst-rice:${arch} \\\n    zsh -c \"service ssh start; cp /persist/.bash_history /root/.bash_history 2&gt;/dev/null; tail -f /dev/null\"\n\n    new_pass=$(cat /dev/random | head -c 20 | base64 | tr -d '=+/')\n    echo \"Password: $new_pass\"\n    echo $new_pass &gt; $HOME/.cst-pw\n    docker exec -e newpp=\"$new_pass\" cst bash -c 'echo \"root:$(printenv newpp)\" | chpasswd'\n}\n\nstop_cst() {\n    variant=${1:-general}\n    docker cp cst:/root/.bash_history $HOME/docker_work/.bash_history 2&gt;/dev/null\n    docker stop cst -t 0\n}\n</code></pre> <ul> <li>Additional parameters are possible due to <code>$@</code></li> <li>Additional arguments can basically be things like new port mappings or volume mounts, etc.</li> </ul> <p>Example execution:</p> <pre><code>start_cst -v \"/Users/tanq16/Repositories/WORKREPO\":/work -p 6767:6767\nsshide -D 65500 root@localhost -p 50022\n# Execute inside the container\nexport TERM=xterm-256color &amp;&amp; \\\necho \"America/Chicago\" &gt; /etc/timezone &amp;&amp; rm -rf /etc/localtime &amp;&amp; \\\nln -s \"/usr/share/zoneinfo/$(cat /etc/timezone)\" /etc/localtime\n</code></pre>"},{"location":"tools/cloud-tools/","title":"Cloud Variant Tools","text":"<p>The Cloud variant extends the General variant with specialized tools for cloud security assessment and operations. It includes tools for major cloud providers and cloud-native technologies.</p>"},{"location":"tools/cloud-tools/#cloud-provider-tools","title":"Cloud Provider Tools","text":""},{"location":"tools/cloud-tools/#multi-cloud-tools","title":"Multi-Cloud Tools","text":"<ul> <li> <p>CloudFox: Cloud security assessment tool</p> <ul> <li>Location: <code>/opt/executables/cloudfox</code></li> <li>Usage: Cloud service enumeration and security assessment</li> </ul> </li> <li> <p>CloudList: Cloud asset enumeration</p> <ul> <li>Location: <code>/opt/executables/cloudlist</code></li> <li>Usage: Multi-cloud asset discovery</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#aws-tools","title":"AWS Tools","text":"<ul> <li> <p>AWS CLI v2: Official AWS command line interface</p> <ul> <li>Location: System PATH</li> <li>Usage: AWS service interaction and management</li> </ul> </li> <li> <p>Prowler: AWS security assessment tool</p> <ul> <li>Location: Python environment</li> <li>Usage: AWS security best practice assessment</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#azure-tools","title":"Azure Tools","text":"<ul> <li> <p>Azure CLI: Official Azure command line interface</p> <ul> <li>Location: System PATH</li> <li>Usage: Azure service management and interaction</li> </ul> </li> <li> <p>AzureHound: Azure security assessment tool</p> <ul> <li>Location: <code>/opt/executables/azurehound</code></li> <li>Usage: Azure AD privilege escalation paths</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#gcp-tools","title":"GCP Tools","text":"<ul> <li>Google Cloud SDK: Official GCP command line tools<ul> <li>Location: <code>/root/google-cloud-sdk/</code></li> <li>Usage: GCP service interaction and management</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#container-security-tools","title":"Container Security Tools","text":"<ul> <li> <p>Trivy: Container vulnerability scanner</p> <ul> <li>Location: <code>/opt/executables/trivy</code></li> <li>Usage: Container and filesystem vulnerability scanning</li> </ul> </li> <li> <p>Peirates: Kubernetes penetration testing tool</p> <ul> <li>Location: <code>/opt/executables/peirates</code></li> <li>Usage: Kubernetes security assessment</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#infrastructure-as-code-security","title":"Infrastructure as Code Security","text":"<ul> <li> <p>Terraform: Infrastructure as code tool</p> <ul> <li>Location: <code>/opt/executables/terraform</code></li> <li>Usage: Infrastructure deployment and assessment</li> </ul> </li> <li> <p>Checkov: IaC security scanner</p> <ul> <li>Location: Python environment</li> <li>Usage: Infrastructure as Code security scanning</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#security-assessment-tools","title":"Security Assessment Tools","text":""},{"location":"tools/cloud-tools/#reconnaissance","title":"Reconnaissance","text":"<ul> <li>Same tools as General variant:<ul> <li>Subfinder</li> <li>HTTPx</li> <li>DNSx</li> <li>Nuclei</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#web-security","title":"Web Security","text":"<ul> <li>Standard web testing tools from General variant:<ul> <li>FFuf</li> <li>Gobuster</li> <li>Hakrawler</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#python-security-tools","title":"Python Security Tools","text":"<p>Located in Python virtual environment at <code>/opt/pyenv/</code>:</p> <ul> <li> <p>ScoutSuite: Multi-cloud security auditing tool</p> <ul> <li>Usage: <code>/opt/ScoutSuite/scout.py</code></li> <li>Purpose: Cloud security posture assessment</li> </ul> </li> <li> <p>PMapper: AWS IAM evaluation tool</p> <ul> <li>Usage: <code>/opt/PMapper/pmapper.py</code></li> <li>Purpose: AWS IAM analysis</li> </ul> </li> <li> <p>KubiScan: Kubernetes security scanning tool</p> <ul> <li>Usage: <code>/opt/KubiScan/KubiScan.py</code></li> <li>Purpose: Kubernetes security assessment</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#additional-resources","title":"Additional Resources","text":"<ul> <li> <p>Kubernetes tools:</p> <ul> <li><code>kubectl</code>: Kubernetes CLI</li> <li><code>kube-hunter</code>: Kubernetes penetration testing</li> <li><code>kubeaudit</code>: Kubernetes security auditing</li> </ul> </li> <li> <p>GCP security tools:</p> <ul> <li>GCP IAM Privilege Escalation scanner</li> <li>GCP security assessment tools</li> </ul> </li> </ul>"},{"location":"tools/cloud-tools/#development-environment","title":"Development Environment","text":"<p>Includes standard development tools:</p> <ul> <li>Python 3 with specialized libraries</li> <li>Go language environment</li> <li>PowerShell Core</li> </ul>"},{"location":"tools/dev-tools/","title":"WIP","text":""},{"location":"tools/general-tools/","title":"General Variant Tools","text":"<p>The General variant provides a comprehensive set of security and utility tools. Each tool is installed in a specific location and serves a particular purpose in security operations.</p>"},{"location":"tools/general-tools/#core-system-tools","title":"Core System Tools","text":"<p>The base system includes essential utilities installed via apt:</p> <ul> <li><code>curl</code>, <code>wget</code>: Network data transfer</li> <li><code>git</code>: Version control</li> <li><code>tmux</code>: Terminal multiplexer</li> <li><code>openssl</code>: Cryptographic toolkit</li> <li><code>openssh-server</code>: SSH connectivity</li> <li><code>openvpn</code>: VPN client</li> <li>Network utilities: <code>ping</code>, <code>telnet</code>, <code>traceroute</code>, <code>ftp</code></li> <li>Development tools: <code>gcc</code>, <code>make</code>, <code>python3</code>, <code>nodejs</code>, <code>npm</code></li> </ul>"},{"location":"tools/general-tools/#security-assessment-tools","title":"Security Assessment Tools","text":""},{"location":"tools/general-tools/#web-application-security","title":"Web Application Security","text":"<ul> <li> <p>Gobuster: Directory/file enumeration tool</p> <ul> <li>Location: <code>/opt/executables/gobuster</code></li> <li>Usage: Web application directory brute forcing</li> </ul> </li> <li> <p>FFuf: Web fuzzer</p> <ul> <li>Location: <code>/opt/executables/ffuf</code></li> <li>Usage: Web fuzzing, directory discovery, parameter fuzzing</li> </ul> </li> <li> <p>Hakrawler: Web crawler</p> <ul> <li>Location: <code>/opt/executables/hakrawler</code></li> <li>Usage: Web crawling and asset discovery</li> </ul> </li> </ul>"},{"location":"tools/general-tools/#network-security","title":"Network Security","text":"<ul> <li> <p>Fingerprintx: Service identification tool</p> <ul> <li>Location: <code>/opt/executables/fingerprintx</code></li> <li>Usage: Service and version detection</li> </ul> </li> <li> <p>Nuclei: Vulnerability scanner</p> <ul> <li>Location: <code>/opt/executables/nuclei</code></li> <li>Usage: Automated vulnerability scanning</li> </ul> </li> <li> <p>Subfinder: Subdomain discovery tool</p> <ul> <li>Location: <code>/opt/executables/subfinder</code></li> <li>Usage: Subdomain enumeration</li> </ul> </li> </ul>"},{"location":"tools/general-tools/#infrastructure-security","title":"Infrastructure Security","text":"<ul> <li>Trivy: Container vulnerability scanner</li> <li>Location: <code>/opt/executables/trivy</code></li> <li>Usage: Container and filesystem scanning</li> </ul>"},{"location":"tools/general-tools/#reconnaissance-tools","title":"Reconnaissance Tools","text":"<ul> <li> <p>Amass: Attack surface mapping tool</p> <ul> <li>Location: <code>/opt/executables/amass</code></li> <li>Usage: Network mapping and asset discovery</li> </ul> </li> <li> <p>DNSx: DNS toolkit</p> <ul> <li>Location: <code>/opt/executables/dnsx</code></li> <li>Usage: DNS enumeration and discovery</li> </ul> </li> <li> <p>HTTPx: HTTP toolkit</p> <ul> <li>Location: <code>/opt/executables/httpx</code></li> <li>Usage: HTTP probe and analyzer</li> </ul> </li> </ul>"},{"location":"tools/general-tools/#utility-tools","title":"Utility Tools","text":"<ul> <li> <p>YQ: YAML processor</p> <ul> <li>Location: <code>/opt/executables/yq</code></li> <li>Usage: YAML/JSON processing</li> </ul> </li> <li> <p>GRPCurl: gRPC testing tool</p> <ul> <li>Location: <code>/opt/executables/grpcurl</code></li> <li>Usage: gRPC API testing</li> </ul> </li> <li> <p>Gron: JSON flattening utility</p> <ul> <li>Location: <code>/opt/executables/gron</code></li> <li>Usage: Make JSON greppable</li> </ul> </li> </ul>"},{"location":"tools/general-tools/#wordlists-and-resources","title":"Wordlists and Resources","text":"<p>Located in <code>/opt/lists/</code>:</p> <ul> <li>SubDomains: <code>subdomains_top_110000.txt</code></li> <li>Infrastructure: <code>common_router_ips.txt</code>, <code>common_http_ports.txt</code></li> <li>Web Content: <code>directory_brute_medium.txt</code>, <code>directory_brute_common.txt</code></li> <li>Passwords: <code>rockyou.txt</code></li> <li>SNMP: <code>snmp.txt</code></li> <li>Variables: <code>secret_keywords.txt</code></li> </ul>"},{"location":"tools/general-tools/#python-environment","title":"Python Environment","text":"<p>A dedicated Python virtual environment is available at <code>/opt/pyenv/</code> with:</p> <ul> <li>Requests: HTTP library</li> <li>Semgrep: Pattern-based code scanning</li> </ul>"},{"location":"tools/general-tools/#development-tools","title":"Development Tools","text":"<ul> <li>Go language environment</li> <li>AWS CLI v2</li> <li>PowerShell Core</li> </ul>"},{"location":"tools/netsec-tools/","title":"WIP","text":""},{"location":"tools/rice-tools/","title":"Rice Variant Tools","text":"<p>The Rice variant enhances the General variant with the CLI Productivity Suite and additional convenience tools. It maintains all security tools from the General variant while adding productivity enhancements.</p>"},{"location":"tools/rice-tools/#cli-productivity-enhancements","title":"CLI Productivity Enhancements","text":""},{"location":"tools/rice-tools/#shell-environment","title":"Shell Environment","text":"<ul> <li> <p>Oh My Zsh: Enhanced shell framework</p> <ul> <li>Location: <code>/root/.oh-my-zsh/</code></li> <li>Features:<ul> <li>Spaceship prompt theme</li> <li>Auto-suggestions</li> <li>Syntax highlighting</li> <li>Git integration</li> </ul> </li> </ul> </li> <li> <p>Tmux Configuration: Enhanced terminal multiplexer</p> <ul> <li>Location: <code>/root/.tmux/</code></li> <li>Custom key bindings</li> <li>Status bar enhancements</li> <li>Plugin management</li> </ul> </li> </ul>"},{"location":"tools/rice-tools/#enhanced-utilities","title":"Enhanced Utilities","text":"<ul> <li> <p>FZF: Fuzzy finder</p> <ul> <li>Location: <code>/root/.fzf/</code></li> <li>Usage: Enhanced command history search</li> <li>File and directory fuzzy finding</li> </ul> </li> <li> <p>LSD: Enhanced ls command</p> <ul> <li>Location: System PATH</li> <li>Usage: Improved file listing with icons</li> </ul> </li> <li> <p>Neovim: Advanced text editor</p> <ul> <li>Location: System installation</li> <li>Includes NvChad configuration</li> <li>Enhanced development features</li> </ul> </li> </ul>"},{"location":"tools/rice-tools/#security-tools","title":"Security Tools","text":"<p>Includes all tools from the General variant:</p>"},{"location":"tools/rice-tools/#web-security-tools","title":"Web Security Tools","text":"<ul> <li>Gobuster</li> <li>FFuf</li> <li>Hakrawler</li> <li>Nuclei</li> </ul>"},{"location":"tools/rice-tools/#network-tools","title":"Network Tools","text":"<ul> <li>Fingerprintx</li> <li>Subfinder</li> <li>HTTPx</li> <li>DNSx</li> </ul>"},{"location":"tools/rice-tools/#infrastructure-tools","title":"Infrastructure Tools","text":"<ul> <li>Trivy</li> <li>AWS CLI</li> <li>PowerShell Core</li> </ul>"},{"location":"tools/rice-tools/#additional-features","title":"Additional Features","text":""},{"location":"tools/rice-tools/#enhanced-navigation","title":"Enhanced Navigation","text":"<ul> <li>Custom shell aliases</li> <li>Directory shortcuts</li> <li>Command history preservation</li> <li>Cross-session history</li> </ul>"},{"location":"tools/rice-tools/#development-support","title":"Development Support","text":"<ul> <li>Enhanced Git integration</li> <li>Improved code completion</li> <li>Better syntax highlighting</li> <li>Development tool integration</li> </ul>"},{"location":"tools/rice-tools/#productivity-features","title":"Productivity Features","text":""},{"location":"tools/rice-tools/#shell-improvements","title":"Shell Improvements","text":"<p>The CLI Productivity Suite adds:</p> <ul> <li>Intelligent command history</li> <li>Enhanced tab completion</li> <li>Directory navigation shortcuts</li> <li>Custom aliases and functions</li> </ul>"},{"location":"tools/rice-tools/#editor-enhancements","title":"Editor Enhancements","text":"<p>NeoVim configuration includes:</p> <ul> <li>Code syntax highlighting</li> <li>File navigation</li> <li>Split pane management</li> <li>Plugin system</li> </ul>"},{"location":"tools/rice-tools/#terminal-multiplexer","title":"Terminal Multiplexer","text":"<p>Tmux enhancements include:</p> <ul> <li>Session management</li> <li>Window organization</li> <li>Pane controls</li> <li>Status information</li> </ul>"},{"location":"tools/rice-tools/#standard-tools","title":"Standard Tools","text":"<p>All tools from the General variant remain available:</p> <ul> <li>Security assessment tools</li> <li>Network utilities</li> <li>Development tools</li> <li>System utilities</li> </ul>"},{"location":"tools/rice-tools/#resource-location","title":"Resource Location","text":"<p>The standard CST directory structure is maintained:</p> <ul> <li><code>/opt/executables/</code>: Binary tools</li> <li><code>/opt/pyenv/</code>: Python environment</li> <li><code>/opt/lists/</code>: Security wordlists</li> <li><code>/persist/</code>: Persistent storage</li> </ul>"},{"location":"variants/","title":"CST Variants Overview","text":"<p>The Containerized Security Toolkit provides purpose-built variants for different security operations. Each variant is available as <code>cst-&lt;variant&gt;:amd</code> for x86_64 systems and <code>cst-&lt;variant&gt;:arm</code> for ARM64 systems.</p>"},{"location":"variants/#variant-selection-guide","title":"Variant Selection Guide","text":"<p>Choose your variant based on primary use case:</p> <ul> <li>General: Basic security operations or as a base for building custom images</li> <li>Cloud: Cloud security assessments and operations</li> <li>Dev: Security tools and application development (<code>WIP</code>)</li> <li>Netsec: Network security testing and monitoring (<code>WIP</code>)</li> <li>Rice: All round security operations with CLI Productivity Suite for shell interface</li> </ul> <p>Each variant follows CST's core conventions while providing specialized capabilities for its target use case.</p>"},{"location":"variants/cloud/","title":"Cloud Variant","text":"<p>The Cloud variant extends the General variant with specialized tools for cloud security assessments and operations across major cloud providers.</p>"},{"location":"variants/cloud/#focus-areas","title":"Focus Areas","text":"<p>Cloud security capabilities include:</p> <ul> <li>Infrastructure security assessment</li> <li>Cloud configuration analysis</li> <li>Identity and access management review</li> <li>Container security scanning</li> <li>Serverless function analysis</li> </ul> <p>This variant excels at:</p> <ul> <li>Cloud security posture assessments</li> <li>Cloud penetration testing</li> <li>Cloud architecture review</li> <li>Compliance checking</li> <li>Resource enumeration</li> </ul>"},{"location":"variants/cloud/#notable-tooling","title":"Notable Tooling","text":"<p>The Cloud variant includes specialized tools for:</p> <ul> <li>AWS environment assessment</li> <li>Azure security testing</li> <li>GCP security analysis</li> <li>Multi-cloud security scanning</li> <li>Cloud-native application security</li> </ul>"},{"location":"variants/dev/","title":"Dev Variant","text":""},{"location":"variants/dev/#wip-not-available-yet","title":"<code>WIP - NOT AVAILABLE YET</code>","text":"<p>The Dev variant provides a security-focused development environment with comprehensive language support and security testing tools.</p>"},{"location":"variants/dev/#development-environment","title":"Development Environment","text":"<p>Includes robust support for:</p> <ul> <li>Python development with Anaconda</li> <li>Golang development environment</li> <li>Node.js and npm</li> <li>Security-focused IDEs and editors</li> <li>Testing frameworks</li> </ul> <p>Perfect for:</p> <ul> <li>Security tool development</li> <li>Secure application development</li> <li>Security automation</li> <li>CI/CD security integration</li> <li>Security research</li> </ul>"},{"location":"variants/general/","title":"General Variant","text":"<p>The General variant serves as both a standalone security operations environment and a base for building custom security-focused images. It provides a carefully selected set of core security tools and utilities while maintaining a clean, extensible structure.</p>"},{"location":"variants/general/#key-features","title":"Key Features","text":"<ul> <li>Core security assessment tools</li> <li>Network analysis utilities</li> <li>Common penetration testing tools</li> <li>Web application security tools</li> <li>Base for custom security images</li> </ul> <p>This variant is ideal for:</p> <ul> <li>Security professionals needing a reliable base environment</li> <li>Teams building custom security toolkits</li> <li>General security assessment work</li> <li>Quick security analysis tasks</li> </ul>"},{"location":"variants/general/#base-image-extension","title":"Base Image Extension","text":"<p>The General variant is designed to be extended. Create custom security-focused images by using it as a base:</p> <pre><code>FROM tanq16/cst-general:amd\n\n# Add custom tools and configurations\nRUN apt-get update &amp;&amp; apt-get install -y \\\n    your-additional-packages\n\n# Add custom scripts or tools\nCOPY ./custom-tools /opt/custom-tools\n</code></pre>"},{"location":"variants/netsec/","title":"Netsec Variant","text":""},{"location":"variants/netsec/#wip-not-available-yet","title":"<code>WIP - NOT AVAILABLE YET</code>","text":"<p>The Network Security variant focuses on network assessment, monitoring, and security testing tools.</p>"},{"location":"variants/netsec/#capabilities","title":"Capabilities","text":"<p>Specialized for:</p> <ul> <li>Network vulnerability assessment</li> <li>Protocol analysis</li> <li>Traffic monitoring</li> <li>Wireless network testing</li> <li>Network forensics</li> </ul> <p>Ideal applications include:</p> <ul> <li>Network penetration testing</li> <li>Security monitoring</li> <li>Network architecture review</li> <li>Protocol security assessment</li> <li>Network forensics analysis</li> </ul>"},{"location":"variants/rice/","title":"Rice Variant","text":"<p>The Rice variant enhances the General variant with the CLI Productivity Suite, creating an efficient and user-friendly security operations environment.</p>"},{"location":"variants/rice/#enhancements","title":"Enhancements","text":"<p>The Rice variant adds:</p> <ul> <li>Customized shell configuration</li> <li>Enhanced terminal utilities</li> <li>Productivity shortcuts</li> <li>Improved text editors</li> <li>Workflow optimizations</li> </ul> <p>Perfect for:</p> <ul> <li>Daily security operations</li> <li>Extended terminal sessions</li> <li>Text-based workflows</li> <li>Security research and documentation</li> <li>Efficient command-line work</li> </ul>"},{"location":"variants/rice/#rice-specific-features","title":"Rice-Specific Features","text":"<p>The integrated CLI Productivity Suite provides:</p> <ul> <li>Custom shell prompts</li> <li>Advanced tab completion</li> <li>Git integrations</li> <li>Enhanced navigation</li> <li>Improved visibility features</li> </ul>"}]}